// Необходимо отличать операционные ошибки от неоперационных, для этого создается базовый класс, от которого будут наследоваться типовые ошибки.

// Операционная - ошибка, ожидаемая во время выполнения программы. Например, пользователь запрашивает несуществующий объект по ID - в этом... 
// случае сервер должен реагировать нормально и продолжать свою работу

// Неоперационная - неожиданная ошибка в работе сервера - нарушение логики, сбой в вычислительных процессах и т.д. 
// В таком случае нужно принять определенные меры, например залогировать ошибку и выключить сервер.

// Для качественного отлова ошибок необходимо разделять ошибки на операционные и неоперационные

// Операционная ошибка - предвиденная, которая никак не должна мешать работе программы. Например, пользователь ввёл плохой запрос
// Например, неправильные логин/пароль, неверно указанный ID задачи при удалении

// Неоперационная ошибка - непредвиденная ошибка в логике работы программы. В таких случаях сложно предсказать дальнейшее поведение...
// ...сервера, необходимо выключать/перезапускать сервер и логировать ошибку для дальнейшего изучения.
export default class APIError extends Error {
    public readonly statusCode: number;
    public readonly isOperational: boolean;
    public readonly description: string;

    constructor (name: string, statusCode: number, isOperational: boolean, description: string) {
        super(description);

        Object.setPrototypeOf(this, new.target.prototype);
        this.name = name;
        this.statusCode = statusCode;
        this.isOperational = isOperational;
        this.description = description;

        Error.captureStackTrace(this);
    }
}